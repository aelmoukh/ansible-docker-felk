# https://www.elastic.co/guide/en/logstash/current/config-examples.html
# grok filter https://stackoverflow.com/questions/41256485/hard-to-stash-a-log-file-with-different-occurrence-of-order-for-a-field-using-log

input {
  http { }
  beats {
    port => 5044
    client_inactivity_timeout => 90
  }
}

filter {

  ruby {
    code => "event.set('filename', event.get('source').split('/').last )"
  }

  mutate {
    # rename => { "[docker][container][id]" => "filename" }
    add_field => { "[@metadata][index_identifier_env]" => "%{[fields][env]}"}
    add_field => { "[log_type]" => "others"}
    rename => { "message" => "original_message"}
  }

  mutate {
    remove_field => ["[docker]"]
    lowercase => ["[@metadata][index_identifier_env]", "[filename]"]
  }

  # common to all
  grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
      break_on_match => false

  }

  # parse any jsons if applicable
  if [json] != "" {
    json {
      source => "json"
    }
  }

  if [method] {
    mutate {
      update => { "log_type" => "api" }
    }
  }

    # parse all files with RUBY_LOGGER except logstash files
  if "logstash" not in [filename]{
    grok {
      break_on_match => false
      match => { "original_message" => "%{RUBY_LOGGER}" }
    }
  }

  # set timestamp of source
  date {
    match => ["timestamp", "ISO8601"]
    timezone => "Asia/Singapore"
  }

  # remove fields
  mutate {
    remove_field => ["[input][type]", "[prospector][type]", "[source]",
                     "[connection_id]", "[offset]", "[binds]", "[beat]"]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    manage_template => false
    index => "%{[@metadata][index_identifier_env]}-%{filename}-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}
